package com.sidc.ra.server.initial;

import java.util.HashMap;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.sidc.ra.server.api.parser.APIParser;
import com.sidc.ra.server.bean.RcuDeviceCatalogueBean;
import com.sidc.ra.server.bean.RcuRoomBean;
import com.sidc.ra.server.bean.RcuRoomTypeBean;
import com.sidc.ra.server.common.CommonDataKey;
import com.sidc.ra.server.common.DataCenter;
import com.sidc.ra.server.framework.abs.AbstractAPIProcess;
import com.sidc.ra.server.request.RcuRoomStatusRequest;
import com.sidc.utils.exception.SiDCException;
import com.sidc.utils.log.LogAction;
import com.sidc.utils.status.SystemStatus;

/**
 * @author Joe
 *
 */
public class RcuRoomStatusInitial extends AbstractAPIProcess {
	private final static Logger logger = LoggerFactory.getLogger(RcuRoomStatusInitial.class);
	private RcuRoomBean entity;

	@SuppressWarnings("unchecked")
	public RcuRoomStatusInitial(String apiRequest) throws SiDCException {
		LogAction.getInstance().initial(logger, this.getClass().getCanonicalName());
		entity = (RcuRoomBean) APIParser.getInstance().parses(apiRequest, RcuRoomBean.class);
	}

	@Override
	protected void init() throws SiDCException, Exception {
		// TODO Auto-generated method stub
		LogAction.getInstance().initial(logger, this.getClass().getCanonicalName());
		LogAction.getInstance().debug("entity:" + entity);
	}

	@Override
	protected Object process() throws SiDCException, Exception {
		// TODO Auto-generated method stub

		DataCenter.getInstance().clear();
		LogAction.getInstance().debug("clean data success from DataCenter.");

		for (RcuRoomStatusRequest roomEntity : entity.getRooms()) {
			for (RcuDeviceCatalogueBean catalogueEntity : roomEntity.getCatalogues()) {
				switch (catalogueEntity.getCatalogue()) {
				case "AIR-CONDITION":
					new RcuHvacInitial(roomEntity.getRoomno(), catalogueEntity.getDevices(), catalogueEntity.getLangs())
							.execute();
					break;
				case "BULB":
					new RcuBulbInitial(roomEntity.getRoomno(), catalogueEntity.getDevices(), catalogueEntity.getLangs())
							.execute();
					break;
				case "CARD":
					new RcuCardInitial(roomEntity.getRoomno(), catalogueEntity.getDevices(), catalogueEntity.getLangs())
							.execute();
					break;
				case "SERVICE":
					new RcuServiceInfoInitial(roomEntity.getRoomno(), catalogueEntity.getDevices()).execute();
					break;
				}
			}
			roomTypeInitial(roomEntity);
		}
		return null;
	}

	@Override
	protected void check() throws SiDCException, Exception {
		// TODO Auto-generated method stub
		if (entity == null) {
			throw new SiDCException(SystemStatus.UDP_BROADCAST_FAIL, "RcuRoomBean entity is null.");
		}
	}

	@SuppressWarnings("unchecked")
	private void roomTypeInitial(RcuRoomStatusRequest entity) {
		HashMap<String, RcuRoomTypeBean> typeMap = (HashMap<String, RcuRoomTypeBean>) DataCenter.getInstance()
				.get(CommonDataKey.RCU_ROOM_TYPE);
		LogAction.getInstance().debug("roomTypeInitial: step 1/3 get DataCenter data success");

		if (typeMap == null) {
			typeMap = new HashMap<String, RcuRoomTypeBean>();
			LogAction.getInstance().debug("roomTypeInitial: step 1.1/3 DataCenter data is null");
		}

		typeMap.put(entity.getRoomno(), new RcuRoomTypeBean(entity.getRoomno(), entity.getRoomType()));
		LogAction.getInstance().debug("roomTypeInitial: step 2/3 put on HasMap success");

		DataCenter.getInstance().put(CommonDataKey.RCU_ROOM_TYPE, typeMap);
		LogAction.getInstance().debug("roomTypeInitial: step 3/3 put on DataCenter success");
	}
}
