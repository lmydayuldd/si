package com.sidc.corejob.common;

import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;

import org.quartz.JobKey;
import org.quartz.Scheduler;
import org.quartz.impl.StdSchedulerFactory;
import org.quartz.impl.matchers.GroupMatcher;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.google.gson.Gson;
import com.sidc.blackcore.api.ra.schedule.response.ScheduleStatus;
import com.sidc.quartz.api.request.QuartzInitialRequest;
import com.sidc.quartz.sdk.rcu.InitialScheduleClient;
import com.sidc.scheduler.api.url.Env;
import com.sidc.utils.log.LogAction;

/**
 * 
 * @author Allen Huang
 *
 */
public class ReflectInterface {

	/**
	 * 獲取同一路徑下所有子類或接口實現類別
	 * 
	 * @param intf
	 * @return
	 * @throws IOException
	 * @throws ClassNotFoundException
	 */
	private final static Logger logger = LoggerFactory.getLogger(ReflectInterface.class);
	
	public List<Class<?>> getAllAssignedClass(Class<?> cal) throws IOException, ClassNotFoundException {
		List<Class<?>> classes = new ArrayList<Class<?>>();
		for (Class<?> c : getClasses(cal)) {

			if (cal.isAssignableFrom(c) && !cal.equals(c)) {
				classes.add(c);
				LogAction.getInstance().initial(logger, c.getClass().getCanonicalName());
			}
		}
		return classes;
	}

	/**
	 * 取得當前類路徑下的所有類別
	 * 
	 * @param cls
	 * @return
	 * @throws IOException
	 * @throws ClassNotFoundException
	 */
	public static List<Class<?>> getClasses(Class<?> cls) throws IOException, ClassNotFoundException {
		// String pk = cls.getPackage().getName();
		String pk = "com.sidc.scheduler.job";
		String path = pk.replace('.', '/');
		ClassLoader classloader = Thread.currentThread().getContextClassLoader();
		URL url = classloader.getResource(path);
		return getClasses(new File(url.getFile()), pk);
	}

	/**
	 * 疊代尋找類別
	 * 
	 * @param dir
	 * @param pk
	 * @return
	 * @throws ClassNotFoundException
	 */
	private static List<Class<?>> getClasses(File dir, String pk) throws ClassNotFoundException {
		List<Class<?>> classes = new ArrayList<Class<?>>();
		if (!dir.exists()) {
			return classes;
		}
		for (File f : dir.listFiles()) {
			if (f.isDirectory()) {
				classes.addAll(getClasses(f, pk + "." + f.getName()));
			}
			String name = f.getName();
			if (name.endsWith(".class")) {
				name = name.substring(0, name.length() - 6);
				QuartzInitialRequest request = new QuartzInitialRequest(name);
				Gson gson = new Gson();
				try {
					final Object json = new InitialScheduleClient(Env.BLACKCORE_HOST, request).execute();
					ScheduleStatus response = gson.fromJson(json.toString(), ScheduleStatus.class);
					if (response.isEnabled()) {
						classes.add(Class.forName(pk + "." + name));
					}
				} catch (Exception e) {
					// TODO: handle exception
				}
			}
		}
		return classes;
	}

	/**
	 * 判斷此工作是否在執行中
	 * 
	 * @param jobName
	 * @param jobGroup
	 * @return
	 */
	public static boolean ifRunJob(String jobName, String jobGroup) {
		try {
			Scheduler scheduler = StdSchedulerFactory.getDefaultScheduler();
			GroupMatcher<JobKey> matcher = GroupMatcher.anyJobGroup();
			Set<JobKey> jobKeys = scheduler.getJobKeys(matcher);

			for (JobKey jobKey : jobKeys) {
				if (jobName.equals(jobKey.getName()) && jobGroup.equals(jobKey.getGroup())) {
					// 執行中
					return true;
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return false;
	}

	/**
	 * 毫秒數轉化為中文顯示
	 * 
	 * @param mss
	 * @return
	 */
	public static String formatDuring(long mss) {
		String returnValue = "";
		long days = mss / (1000 * 60 * 60 * 24);
		long hours = (mss % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60);
		long minutes = (mss % (1000 * 60 * 60)) / (1000 * 60);
		long seconds = (mss % (1000 * 60)) / 1000;
		if (days != 0l) {
			returnValue += days + "天";
		}
		if (hours != 0l) {
			returnValue += hours + "小時";
		}
		if (minutes != 0l) {
			returnValue += minutes + "分";
		}
		if (seconds != 0l) {
			returnValue += seconds + "秒";
		}
		return returnValue;
	}

	public static boolean isEmpty(Object obj) {
		if (obj == null || obj.toString().isEmpty()) {
			return true;
		} else {
			return false;
		}
	}

	public static boolean isNotEmpty(Object obj) {
		return !isEmpty(obj);
	}
}