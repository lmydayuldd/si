package com.sidc.scheduler.job;

import org.quartz.JobExecutionContext;
import org.quartz.JobExecutionException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.sidc.blackcore.api.ra.schedule.bean.ScheduleInfoBean;
import com.sidc.blackcore.api.sits.rcu.request.HvacCommandRequest;
import com.sidc.corejob.IJob;
import com.sidc.corejob.JobInfo;
import com.sidc.corejob.JobsAction;
import com.sidc.quartz.api.request.CheckOutListRequest;
import com.sidc.quartz.api.request.QuartzInitialRequest;
import com.sidc.quartz.api.response.CheckOutResposne;
import com.sidc.quartz.sdk.rcu.CheckOutRoomListClient;
import com.sidc.quartz.sdk.rcu.HVACCommandClient;
import com.sidc.quartz.sdk.rcu.ScheduleInfoClient;
import com.sidc.scheduler.api.url.Env;
import com.sidc.utils.exception.SiDCException;
import com.sidc.utils.log.LogAction;

public class CheckOutTimer extends JobsAction implements IJob {

	private Gson gson = new Gson();
	private final static Logger logger = LoggerFactory.getLogger(CheckOutTimer.class);

	public void execute(JobExecutionContext context) throws JobExecutionException {
		// TODO Auto-generated method stub
		try {
			QuartzInitialRequest request = new QuartzInitialRequest("CheckOutTimer");
			Object json = new ScheduleInfoClient(Env.BLACKCORE_HOST, request).execute();
			ScheduleInfoBean enity = gson.fromJson(json.toString(), ScheduleInfoBean.class);
			
			JsonElement jsonElement = new JsonParser().parse(enity.getDescription());
			JsonObject jsonObject = jsonElement.getAsJsonObject();
			int temperature = Integer.parseInt(jsonObject.get("temperature").toString());
			int timer = Integer.parseInt(jsonObject.get("timer").toString());
			
			json = new CheckOutRoomListClient(Env.BLACKCORE_HOST).execute();
			CheckOutListRequest rooms = gson.fromJson(json.toString(), CheckOutListRequest.class);
			for (CheckOutResposne room : rooms.getList()) {
				HvacCommandRequest openHVAC = new HvacCommandRequest(room.getRoomno(), room.getIp(), true, temperature);
				new HVACCommandClient(Env.BLACKCORE_HOST, openHVAC).execute();
				logger.debug("Room no " + room.getRoomno() + " HVAC open success");
			}

			new HvacCloseTask(timer).start();
		} catch (Exception e) {
			logger.debug("HVAC open Error： " + e.getMessage());
		}
	}

	@Override
	public JobInfo setJobInfo() {
		// TODO Auto-generated method stub
		QuartzInitialRequest request = new QuartzInitialRequest("CheckOutTimer");
		JobInfo job = new JobInfo();

		try {
			Object json = new ScheduleInfoClient(Env.BLACKCORE_HOST, request).execute();
			ScheduleInfoBean enity = gson.fromJson(json.toString(), ScheduleInfoBean.class);

			job.setJobName("CheckOutTimer"); // 設置任務名稱
			job.setJobGroup(enity.getGroupname()); // 設置任務分組
			job.setTriggerType(0); // 設定任務執行計劃
									// 0：使用cron表達式執行，使用此項時cron表達式必填。
			job.setCron(enity.getExecutiontime());
			job.setCronDescription(enity.getDescription());
		} catch (SiDCException e) {
			// TODO Auto-generated catch block
			LogAction.getInstance().debug("Check Out job info SiDCError： " + e.getMessage());
		} catch (Exception e) {
			// TODO Auto-generated catch block
			LogAction.getInstance().debug("Check Out job info Error： " + e.getMessage());
		}
		return job;
	}

	@Override
	protected void initial() throws SiDCException, Exception {
		// TODO Auto-generated method stub
		LogAction.getInstance().initial(logger, this.getClass().getCanonicalName());
	}

}
