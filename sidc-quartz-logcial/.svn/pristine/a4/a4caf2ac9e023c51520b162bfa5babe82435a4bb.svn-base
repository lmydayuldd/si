package com.sidc.quartz.logcial.rcu.api;

import java.util.List;

import com.sidc.common.framework.abs.AbstractAPIProcess;
import com.sidc.configuration.blackcore.SidcUrlsConfiguration;
import com.sidc.configuration.blackcore.SidcUrlsLink;
import com.sidc.configuration.conf.SidcUrlName;
import com.sidc.quartz.api.request.RoomRcuScheduleRequest;
import com.sidc.quartz.sdk.rcu.CheckOutRoomRCUClient;
import com.sidc.utils.common.DataCenter;
import com.sidc.utils.exception.SiDCException;
import com.sidc.utils.log.LogAction;
import com.sidc.utils.status.APIStatus;

public class CheckOutTimerProcess extends AbstractAPIProcess {

	private RoomRcuScheduleRequest enity;
	
	public CheckOutTimerProcess(RoomRcuScheduleRequest enity) {
		// TODO Auto-generated constructor stub
		this.enity = enity;
	}
	
	@Override
	protected void init() throws SiDCException, Exception {
		// TODO Auto-generated method stub
		LogAction.getInstance().debug("Request:" + this.enity);
	}

	@Override
	protected Object process() throws SiDCException, Exception {
		// TODO Auto-generated method stub
		return new CheckOutRoomRCUClient(configure(SidcUrlName.BLACKCORE.toString()), enity).execute();
	}

	@Override
	protected void check() throws SiDCException, Exception {
		// TODO Auto-generated method stub
		if (this.enity == null) {
			throw new SiDCException(APIStatus.ILLEGAL_ARGUMENT, "Rquest is illegal");
		}
		
		if (this.enity.getMinute() <= 0) {
			throw new SiDCException(APIStatus.ILLEGAL_ARGUMENT, "Minute less than or equal to 0");
		}
	}

	public String configure(final String serverName) throws SiDCException {
		SidcUrlsConfiguration sidcConfigure = (SidcUrlsConfiguration) DataCenter.getInstance()
				.get(SidcUrlName.SITS.toString());
		List<SidcUrlsLink> urlsLinks = sidcConfigure.getUrls();
		String url = null;
		for (SidcUrlsLink sidcUrlsLink : urlsLinks) {
			if (sidcUrlsLink.getName().equalsIgnoreCase(serverName))
				url = sidcUrlsLink.getUrl();
		}
		return url;
	}
}
